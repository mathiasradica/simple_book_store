// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Simple_Book_Store.Data;

namespace Simple_Book_Store.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "743d3d60-9850-4da7-9e1a-87fc021e31b8",
                            ConcurrencyStamp = "743d3d60-9850-4da7-9e1a-87fc021e31b8",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "02138091-57c5-40eb-92c3-33411e769430",
                            ConcurrencyStamp = "02138091-57c5-40eb-92c3-33411e769430",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "2c98f4be-a893-43d5-a7e5-830f72b8367e",
                            RoleId = "743d3d60-9850-4da7-9e1a-87fc021e31b8"
                        },
                        new
                        {
                            UserId = "e4a07e4f-af32-46b1-b7a5-098dff1da176",
                            RoleId = "02138091-57c5-40eb-92c3-33411e769430"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Simple_Book_Store.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "2c98f4be-a893-43d5-a7e5-830f72b8367e",
                            AccessFailedCount = 0,
                            AddressLine1 = "Adminsgatan 42",
                            AddressLine2 = "Plan 9 (from outer space)",
                            City = "Adminköping",
                            ConcurrencyStamp = "e115a3f3-69e0-4300-8fad-a033aae2a8c5",
                            Country = "Adminarnia",
                            Email = "root@superuser.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Adminsson",
                            LockoutEnabled = false,
                            NormalizedEmail = "ROOT@SUPERUSER.COM",
                            NormalizedUserName = "ROOT@SUPERUSER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAfX+lg0YeP6ZA1TYFtizVCCK1TzA0ERm8mffEExxtRwDAocqoxXwFDkoRy7h2ElfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e2cd21e0-5c5e-4b6b-a631-97137d99c70e",
                            TwoFactorEnabled = false,
                            UserName = "root@superuser.com",
                            ZipCode = "12345"
                        },
                        new
                        {
                            Id = "e4a07e4f-af32-46b1-b7a5-098dff1da176",
                            AccessFailedCount = 0,
                            AddressLine1 = "Black Castle",
                            AddressLine2 = "(somewhere in the clouds)",
                            City = "Adrilankha",
                            ConcurrencyStamp = "318c0efc-014a-4408-a748-8a1799a3ec40",
                            Country = "Dragaera",
                            Email = "vlad@taltos.com",
                            EmailConfirmed = true,
                            FirstName = "Vlad",
                            LastName = "Taltos",
                            LockoutEnabled = false,
                            NormalizedEmail = "VLAD@TALTOS.COM",
                            NormalizedUserName = "VLAD@TALTOS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOFaBUQHoUgTQDaS9Yzw3eOOjpzfyWlcm8oqjPdlBwnB+m1HhfYe/Qz000Ifum7NuA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "681f8968-5a1e-4691-b1ea-0d3e045c32ff",
                            TwoFactorEnabled = false,
                            UserName = "vlad@taltos.com",
                            ZipCode = "42222"
                        });
                });

            modelBuilder.Entity("Simple_Book_Store.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Adventure",
                            Description = "Exciting adventures with historical background"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Crime",
                            Description = "Dramatic detective stories"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Fantasy",
                            Description = "Get in the mood for some magic!"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Horror",
                            Description = "Thrilling horror stories"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Humour",
                            Description = "Fun, Comic, Farce, all you need is laugh!"
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryName = "NonFiction",
                            Description = "Biographies, history and educational stuff"
                        },
                        new
                        {
                            CategoryId = 7,
                            CategoryName = "Romance",
                            Description = "Sweet sensations and love"
                        },
                        new
                        {
                            CategoryId = 8,
                            CategoryName = "SciFi",
                            Description = "Science and fiction, a good combo!"
                        },
                        new
                        {
                            CategoryId = 9,
                            CategoryName = "Western",
                            Description = "Gunsmoke, heroes and villains"
                        });
                });

            modelBuilder.Entity("Simple_Book_Store.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsShipped")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("OrderId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Simple_Book_Store.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Simple_Book_Store.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageThumbnailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOnFrontPage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnSale")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProductOfTheWeek")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("PriceOnSale")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Author = "Dan Brown",
                            CategoryId = 1,
                            Description = "A Robert Langdon adventure",
                            ImageThumbnailUrl = "/images/Books_small/A1.jpg",
                            ImageUrl = "/images/Books/A1.jpg",
                            IsOnFrontPage = false,
                            IsOnSale = false,
                            IsProductOfTheWeek = false,
                            Price = 99.95m,
                            PriceOnSale = 89.95m,
                            Title = "Da Vinci koden"
                        },
                        new
                        {
                            ProductId = 2,
                            Author = "Frans G Bengtsson",
                            CategoryId = 1,
                            Description = "Historic viking novel",
                            ImageThumbnailUrl = "/images/Books_small/A2.jpg",
                            ImageUrl = "/images/Books/A2.jpg",
                            IsOnFrontPage = false,
                            IsOnSale = true,
                            IsProductOfTheWeek = false,
                            Price = 77.95m,
                            PriceOnSale = 67.95m,
                            Title = "Röde orm"
                        },
                        new
                        {
                            ProductId = 3,
                            Author = "Colin Dexter",
                            CategoryId = 2,
                            Description = "A C Dexter crime novel",
                            ImageThumbnailUrl = "/images/Books_small/C1.jpg",
                            ImageUrl = "/images/Books/C1.jpg",
                            IsOnFrontPage = false,
                            IsOnSale = true,
                            IsProductOfTheWeek = false,
                            Price = 77.95m,
                            PriceOnSale = 67.95m,
                            Title = "Flicka försvunnen"
                        },
                        new
                        {
                            ProductId = 4,
                            Author = "JK Rowling",
                            CategoryId = 3,
                            Description = "JK Rowling magic",
                            ImageThumbnailUrl = "/images/Books_small/F1.jpg",
                            ImageUrl = "/images/Books/F1.jpg",
                            IsOnFrontPage = false,
                            IsOnSale = false,
                            IsProductOfTheWeek = false,
                            Price = 88.95m,
                            PriceOnSale = 78.95m,
                            Title = "Harry Potter och Dödsrelikerna"
                        },
                        new
                        {
                            ProductId = 5,
                            Author = "David Seltzer",
                            CategoryId = 4,
                            Description = "Horror by D Seltzer",
                            ImageThumbnailUrl = "/images/Books_small/Ho1.jpg",
                            ImageUrl = "/images/Books/Ho1.jpg",
                            IsOnFrontPage = false,
                            IsOnSale = false,
                            IsProductOfTheWeek = false,
                            Price = 48.95m,
                            PriceOnSale = 38.95m,
                            Title = "The Omen"
                        },
                        new
                        {
                            ProductId = 6,
                            Author = "Tom Sharpe",
                            CategoryId = 5,
                            Description = "Brilliant fun!",
                            ImageThumbnailUrl = "/images/Books_small/Hu1.jpg",
                            ImageUrl = "/images/Books/Hu1.jpg",
                            IsOnFrontPage = false,
                            IsOnSale = false,
                            IsProductOfTheWeek = false,
                            Price = 68.95m,
                            PriceOnSale = 59.95m,
                            Title = "The Wilt inheritance"
                        },
                        new
                        {
                            ProductId = 7,
                            Author = "Terry Jones, Alan Ereira",
                            CategoryId = 6,
                            Description = "Historic facts and myths",
                            ImageThumbnailUrl = "/images/Books_small/NF1.jpg",
                            ImageUrl = "/images/Books/NF1.jpg",
                            IsOnFrontPage = false,
                            IsOnSale = false,
                            IsProductOfTheWeek = false,
                            Price = 99m,
                            PriceOnSale = 89.95m,
                            Title = "Barbarerna"
                        },
                        new
                        {
                            ProductId = 8,
                            Author = "Margaret George",
                            CategoryId = 6,
                            Description = "A king's diary",
                            ImageThumbnailUrl = "/images/Books_small/NF2.jpg",
                            ImageUrl = "/images/Books/NF2.jpg",
                            IsOnFrontPage = false,
                            IsOnSale = false,
                            IsProductOfTheWeek = false,
                            Price = 99.95m,
                            PriceOnSale = 79.95m,
                            Title = "Henrik VIII:s Självbiografi"
                        },
                        new
                        {
                            ProductId = 9,
                            Author = "Jan Skansholm",
                            CategoryId = 6,
                            Description = "A C# programming language tutorial",
                            ImageThumbnailUrl = "/images/Books_small/NF3.jpg",
                            ImageUrl = "/images/Books/NF3.jpg",
                            IsOnFrontPage = false,
                            IsOnSale = false,
                            IsProductOfTheWeek = false,
                            Price = 42.95m,
                            PriceOnSale = 35.95m,
                            Title = "Skarp programmering med C#"
                        },
                        new
                        {
                            ProductId = 10,
                            Author = "Judith Krantz",
                            CategoryId = 7,
                            Description = "Love and romance",
                            ImageThumbnailUrl = "/images/Books_small/R1.jpg",
                            ImageUrl = "/images/Books/R1.jpg",
                            IsOnFrontPage = false,
                            IsOnSale = false,
                            IsProductOfTheWeek = false,
                            Price = 88.95m,
                            PriceOnSale = 78.95m,
                            Title = "Mistrals dotter"
                        },
                        new
                        {
                            ProductId = 11,
                            Author = "Steven Brust",
                            CategoryId = 8,
                            Description = "The first three Vlad Taltos novels",
                            ImageThumbnailUrl = "/images/Books_small/SF1.jpg",
                            ImageUrl = "/images/Books/SF1.jpg",
                            IsOnFrontPage = false,
                            IsOnSale = false,
                            IsProductOfTheWeek = true,
                            Price = 99.95m,
                            PriceOnSale = 79.95m,
                            Title = "The book of Jhereg"
                        },
                        new
                        {
                            ProductId = 12,
                            Author = "Marshall Grover (L F Meares)",
                            CategoryId = 9,
                            Description = "Klassiskt möte mellan hjältar!",
                            ImageThumbnailUrl = "/images/Books_small/W1.jpg",
                            ImageUrl = "/images/Books/W1.jpg",
                            IsOnFrontPage = false,
                            IsOnSale = false,
                            IsProductOfTheWeek = false,
                            Price = 39.95m,
                            PriceOnSale = 29.95m,
                            Title = "Bill & Ben - Big Jim"
                        },
                        new
                        {
                            ProductId = 13,
                            Author = "Marshall Grover (L F Meares)",
                            CategoryId = 9,
                            Description = "Humorfylld western klassiker",
                            ImageThumbnailUrl = "/images/Books_small/W2.jpg",
                            ImageUrl = "/images/Books/W2.jpg",
                            IsOnFrontPage = false,
                            IsOnSale = false,
                            IsProductOfTheWeek = false,
                            Price = 39.95m,
                            PriceOnSale = 29.95m,
                            Title = "Bill och Ben och Dakota Red"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Simple_Book_Store.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Simple_Book_Store.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Simple_Book_Store.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Simple_Book_Store.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Simple_Book_Store.Models.Order", b =>
                {
                    b.HasOne("Simple_Book_Store.Data.ApplicationUser", null)
                        .WithMany("OrderHistory")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Simple_Book_Store.Models.OrderItem", b =>
                {
                    b.HasOne("Simple_Book_Store.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Simple_Book_Store.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Simple_Book_Store.Models.Product", b =>
                {
                    b.HasOne("Simple_Book_Store.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
